# СТРОКОВЫЕ МЕТОДЫ
split() разбивает строку на слова, используя в качестве разделителя последовательность пробельных символов
	split('.') вернет список, полученный разделением исходной строки по символу '.'
	ip = '192.168.1.24'
	numbers = ip.split('.')    # указываем явно разделитель
	print(numbers)
	['192', '168', '1', '24']

join() собирает строку из элементов списка, используя в качестве разделителя строку, к которой применяется метод.

# МЕТОДЫ СПИСКОВ
insert(index, value) позволяет вставлять значение в список в заданной позиции. В него передается два аргумента:
	index: индекс, задающий место вставки значения;
	value: значение, которое требуется вставить.
	
index(value) возвращает индекс первого элемента, значение которого равняется переданному в метод значению.
	value: значение, индекс которого требуется найти.
	
remove(value) удаляет первый элемент, значение которого равняется переданному в метод значению.
	value: значение, которое требуется удалить.
	Метод уменьшает размер списка на один элемент. Все элементы после удаленного элемента смещаются на одну позицию к началу списка. Если элемент в списке не найден, то во время выполнения происходит ошибка.
	метод remove() удаляет только первый элемент с указанным значением. Все последующие его вхождения остаются в списке. Чтобы удалить все вхождения нужно использовать цикл while в связке с оператором принадлежности in и методом remove.
	
pop(index) удаляет элемент по указанному индексу и возвращает его. В метод pop() передается один необязательный аргумент:
	index: индекс элемента, который требуется удалить.
	Если индекс не указан, то метод удаляет и возвращает последний элемент списка. Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка.
	
count(value) возвращает количество элементов в списке, значения которых равны переданному в метод значению. 
	value: значение, количество элементов, равных которому,  нужно посчитать.
	Если значение в списке не найдено, то метод возвращает 0.
	
reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный.
	Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1]. Метод reverse() меняет порядок элементов на обратный в текущем списке, а срез создает копию списка, в котором элементы следуют в обратном порядке.

clear() удаляет все элементы из списка.

copy() создает поверхностную копию списка.
	Аналогичного результата можно достичь с помощью срезов или функции list():
	names = ['Gvido', 'Roman' , 'Timur']
	names_copy1 = list(names)             # создаем поверхностную копию с помощью функции list()
	names_copy2 = names[:]                # создаем поверхностную копию с помощью среза от начала до конца